import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    '''Write your code below'''
    dict98 = {
    "Seller Username": owner,
    "Product ID": product_ID,
    "Product Title": product_title,
    "Product Type": product_type,
    "Price Per Day": price_per_day,
    "Total Stock Available": total_stock_available
    }
    with open(product_json_file,'r+') as f:
        try:
            content = json.load(f)
            if dict98 not in content:
                content.append(dict98)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
            else:
                return False
        except JSONDecodeError:
            level = []
            level.append(dict98)
            json.dump(level,f)
    return True
    

def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    '''Write your code below'''
    level = []
    with open(product_json_file,'r') as f:
        content = json.load(f)
        for product in content:
            if product["Seller Username"] == owner:
                level.append(product)
    return level

def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list


def fetch_product_by_id(product_json_file, product_id):
    '''Get product details by product ID'''
    try:
        with open(product_json_file, 'r') as f:
            products = json.load(f)
            return [product for product in products if product['Product ID'] == product_id]
    except json.JSONDecodeError:
        print("Error: Invalid JSON format in file")
        return []

def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    '''Write your code below'''
    with open(product_json_file,'r+') as f:
        try:
            content = json.load(f)
            for i in range(len(content)):
                if content[i]["Seller Username"] == Username and content[i]["Product ID"] == product_ID:
                    try:
                        a = content[i][detail_to_be_updated]
                    except KeyError:
                        return False
                    content[i][detail_to_be_updated] = new_value
                    f.seek(0)
                    f.truncate()
                    json.dump(content,f)
                    return True
        except JSONDecodeError:
            return False

def Add_item_to_wishlist(username, product_id, gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    try:
        with open(gamers_json_file, 'r+') as f:
            content = json.load(f)
            for gamer in content:
                if gamer["Username"] == username:
                    if product_id not in gamer["Wishlist"]:
                        gamer["Wishlist"].append(product_id)
                        f.seek(0)
                        f.truncate()
                        json.dump(content, f)
                        return True
                    else:
                        return False
    except (JSONDecodeError, FileNotFoundError):
        return False

def remove_item_from_wishlist(username, product_id, gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    try:
        with open(gamers_json_file, 'r+') as f:
            content = json.load(f)
            for gamer in content:
                if gamer["Username"] == username:
                    if product_id in gamer["Wishlist"]:
                        gamer["Wishlist"].remove(product_id)
                        f.seek(0)
                        f.truncate()
                        json.dump(content, f)
                        return True
                    else:
                        return False
            else:
                return False
    except (JSONDecodeError, FileNotFoundError):
        return False

def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    '''Write your code below'''
    with open(products_json_file,'r') as pd, open(gamers_json_file,'r+') as gd:
        try:
            pvar = json.load(pd)
            gvar = json.load(gd)
            for product in pvar:
                if product["Product ID"] == product_ID and product["Total Stock Available"] >= Quantity:
                    dict98 = {
                        "Product ID": product_ID,
                        "Quantity": Quantity,
                        "Price": product["Price Per Day"],
                        "Booking Start Date": booking_start_date,
                        "Booking End Date": booking_end_date
                    }
                    for i in range(len(gvar)):
                        if gvar[i]["Username"] == Username:
                            gvar[i]["Cart"].append(dict98)
                            gd.seek(0)
                            gd.truncate()
                            json.dump(gvar,gd)
                            return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False

def Remove_item_from_cart(username, product_id, gamers_json_file):
    '''Remove item from the cart || Return True if removed successfully else False'''

    try:
        with open(gamers_json_file, 'r+') as f:
            data = json.load(f)
            for gamer in data:
                if gamer['Username'] == username:
                    for item in gamer['Cart']:
                        if item['Product ID'] == product_id:
                            gamer['Cart'].remove(item)
                            f.seek(0)
                            json.dump(data, f, indent=4)
                            f.truncate()
                            return True
                    else:
                        return False
            else:
                return False
    except (FileNotFoundError, JSONDecodeError):
        return False

def View_Cart(username, gamers_json_file):
    '''Return the current cart of the user'''
    with open(gamers_json_file, 'r') as f:
        try:
            content = json.load(f)
            for gamer in content:
                if gamer["Username"] == username:
                    return gamer["Cart"]
        except JSONDecodeError:
            pass

def Place_order(Username,gamers_json_file,Order_Id,orders_json_file,products_json_file):
    '''Place order || Return True is order placed successfully else False || Decrease the quantity of the product orderd if successfull'''
    '''Write your code below'''
    with open(gamers_json_file,'r+') as gd, open(orders_json_file,'r+') as od, open(products_json_file,'r+') as pd:
        try:
            gvar = json.load(gd)
            ovar = json.load(od)
            pvar = json.load(pd)
            for i in range(len(gvar)):
                if gvar[i]["Username"] == Username:
                    order = {
                        "Order ID": Order_Id,
                        "Ordered by": Username,
                        "Items": gvar[i]["Cart"]
                    }
                    Total_cost = 0
                    for product in gvar[i]["Cart"]:
                        booking_start_date = datetime.strptime(product["Booking Start Date"], "%Y-%m-%d")
                        booking_end_date = datetime.strptime(product["Booking End Date"], "%Y-%m-%d")
                        days = (booking_end_date-booking_start_date).days
                        Total_cost += days * product["Price"]*product["Quantity"]
                        for j in range(len(pvar)):
                            if pvar[j]["Product ID"] == product["Product ID"]:
                                pvar[j]["Total Stock Available"] -= product["Quantity"]
                    order["Total Cost"] = Total_cost
                    ovar.append(order)
                    gd.seek(0)
                    gd.truncate()
                    json.dump(gvar,gd)
                    od.seek(0)
                    od.truncate()
                    json.dump(ovar,od)
                    pd.seek(0)
                    pd.truncate()
                    json.dump(pvar,pd)
                    return True
            else:
                return False
        except JSONDecodeError:
            return False

def View_User_Details(gamers_json_file, Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    with open(gamers_json_file, 'r') as f:
        try:
            content = json.load(f)
            return [gamer for gamer in content if gamer["Username"] == Username]
        except JSONDecodeError:
            return []

def Update_User(gamers_json_file, Username, detail_to_be_updated, updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    with open(gamers_json_file, 'r+') as f:
        try:
            content = json.load(f)
            for gamer in content:
                if gamer["Username"] == Username:
                    if detail_to_be_updated in gamer:
                        gamer[detail_to_be_updated] = updated_detail
                        f.seek(0)
                        f.truncate()
                        json.dump(content, f)
                        return True
                    else:
                        return False
            else:
                return False
        except JSONDecodeError:
            return False
        
def Fetch_all_orders(orders_json_file, Username):
    '''Fetch all previous orders for the user and return them as a list'''
    with open(orders_json_file, 'r') as f:
        try:
            content = json.load(f)
            orders = [order for order in content if order['Ordered by'] == Username]
            return orders
        except JSONDecodeError:
            return []

    
    